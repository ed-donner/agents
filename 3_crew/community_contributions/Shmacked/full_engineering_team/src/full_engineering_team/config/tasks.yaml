architect_task:
  description: >
    Goals:
     1. Design the system architecture that will be used to implement the project ensuring that the system is modular and maintainable.
     2. Implement the system architecture that you designed by delegating the task to the lead backend and frontend engineers.

    Here are the requirements: {requirements}

    Goal 1:
    - Design the system architecture that will be used to implement the project ensuring that the system is modular and maintainable.
    - Take the high level requirements described here and prepare a more detailed design; create files only as needed; describe the function and method signatures in the files as needed.
    - The project root will be in the output directory. Everything should be in the output directory, nothing should be outside of the output directory.
    - It needs a main.py file in the project root that will be used to run the project on a local server and make it accessible from the browser.
    - IMPORTANT: main.py is not for testing or unit testing; it is for running the project on a local server to make it accessible from the browser.
    - It needs a frontend UI to interact with the backend. Describe the type of pages and endpoints that will be needed for the frontend UI to be implemented by both the lead frontend engineer and lead backend engineer.
    - Store the design in a file called output/architecture.md in the root directory of the project.

    Goal 2:
    - Delegate the task to the lead backend and lead frontend engineers to implement the system architecture that you designed.
    - You can prompt the lead backend and lead frontend engineers to ask them if they've fully implemented the system architecture that you designed.
  agent: architect
  expected_output:
    A detailed output/architecture.md file containing the system architecture design.
    The output should also include the main.py file for project execution and the initial delegation prompt to the lead engineers.

backend_lead_engineer_task:
  description: >
    Goals:
     1. Design the backend architecture for the engineering team, ensuring that the backend is modular and maintainable.
     2. Implement the backend architecture that you designed by delegating the task to the backend engineers.

    Goal 1:
    - Design the backend architecture for the engineering team, ensuring that the backend is modular and maintainable. So python related modules can go in /python, /backend, or something like that.
    - Use the output/architecture.md file to help you design the backend architecture.
    - The project root will be in the output directory. Everything should be in the output directory, nothing should be outside of the output directory.
    - Create files only as needed; describe the function and method signatures in the files as needed.
    - The frontend needs to be able to interact with the backend, so create the necessary routes and endpoints for the backend documentation to describe how to interact with the backend.
    - Store the design in a file called output/backend_architecture.md in the root directory of the project.

    Goal 2:
    - Implement the backend architecture that you designed by delegating the task to the backend engineers.
    - Deploy other backend engineers to help you with the task.
    - Make sure that all the routes and endpoints are implemented.
    - Tests need to go in their own directory that makes sense for the backend module, like /tests/python, /tests/backend, or something like that.
    - IMPORTANT: Only output the backend code without any other formatting or commentary. The backend code should be executable as is.
  agent: backend_lead_engineer
  context:
    - architect_task
  expected_output:
    A detailed output/backend_architecture.md file containing the backend architecture design.
    The output should also include the initial delegation prompt to the backend engineers.

frontend_lead_engineer_task:
  description: >
    Goals:
     1. Design the frontend architecture for the engineering team, ensuring that the frontend is modular and maintainable.
     2. Implement the frontend architecture that you designed by delegating the task to the frontend engineers.

    Goal 1:
    - Design the frontend architecture for the engineering team, ensuring that the frontend is modular and maintainable. This should include all the HTML files necessary to implement the frontend architecture based on the backend_architecture.md file.
    - Use the output/architecture.md file and the output/backend_architecture.md file to help you design the frontend architecture.
    - The project root will be in the output directory. Everything should be in the output directory, nothing should be outside of the output directory.
    - Create files only as needed; describe the function and method signatures in the files as needed.
    - Tests need to go in their own directory that makes sense for the frontend module, like /tests/frontend or something like that.
    - Store the design in a file called output/frontend_architecture.md in the root directory of the project.

    Goal 2:
    - Implement the frontend architecture that you designed by delegating the task to the frontend engineers.
    - Deploy other frontend engineers to help you with the task.
    - Make sure that all the routes and endpoints are implemented.
    - IMPORTANT: Only output the frontend code without any other formatting or commentary. The frontend code should be executable as is.
  agent: frontend_lead_engineer
  context:
    - architect_task
  expected_output:
    A detailed output/frontend_architecture.md file containing the frontend architecture design.
    The output should also include the initial delegation prompt to the frontend engineers.

backend_engineer_task:
  description: >
    Goals:
     1. Implement the backend architecture for the engineering team, ensuring that the backend is modular and maintainable.

    Goal 1:
    - Implement the backend architecture for the engineering team, ensuring that the backend is modular and maintainable. Use the output/backend_architecture.md file to help you implement the backend architecture.
    - Create files only as needed; describe the function and method signatures in the files as needed.
    - The project root will be in the output directory. Everything should be in the output directory, nothing should be outside of the output directory.
    - IMPORTANT: Only output the backend code without any other formatting or commentary. The backend code should be executable as is.
  agent: backend_engineer
  context:
    - backend_lead_engineer_task
  expected_output:
    A detailed output/backend_engineer.py file containing the backend code.
    The output should also include the initial delegation prompt to the backend engineers.

frontend_engineer_task:
  description: >
    Goals:
     1. Implement the frontend architecture for the engineering team, ensuring that the frontend is modular and maintainable.

    Goal 1:
    - Implement the frontend architecture for the engineering team, ensuring that the frontend is modular and maintainable.
    - Use the output/frontend_architecture.md file to help you implement the frontend architecture.
    - Create files only as needed; describe the function and method signatures in the files as needed.
    - The project root will be in the output directory. Everything should be in the output directory, nothing should be outside of the output directory.
    - IMPORTANT: Only output the frontend code without any other formatting or commentary. The frontend code should be executable as is.
  agent: frontend_engineer
  context:
    - frontend_lead_engineer_task
  expected_output:
    A detailed output/frontend_engineer.py file containing the frontend code.
    The output should also include the initial delegation prompt to the frontend engineers.

backend_test_engineer_task:
  description: >
    Goals:
     1. Write unit tests for the given backend module and create a file prefixed with test_ and the name of the backend module with whatever suffix is appropriate for the test and the file extension should be .py in the same directory as the backend module.

    Goal 1:
    - Write unit tests for the given backend module and create a file prefixed with test_ and the name of the backend module with whatever suffix is appropriate for the test and the file extension should be .py and should go into a folder that makes sense for the backend module, like /tests or something like that.
    - Use the output/backend_architecture.md file to help you write the unit tests as needed.
    - The project root will be in the output directory. Everything should be in the output directory, nothing should be outside of the output directory.
    - IMPORTANT: Only output the test code without any other formatting or commentary. The test code should be executable as is.
  agent: backend_test_engineer
  context:
    - backend_lead_engineer_task
  expected_output:
    A detailed output/backend_test_engineer.py file containing the backend test code.
    The output should also include the initial delegation prompt to the backend test engineers.

frontend_test_engineer_task:
  description: >
    Goals:
     1. Write unit tests for the given frontend module and create a file prefixed with test_ and the name of the frontend module with whatever suffix is appropriate for the test and the file extension should be .py and should go into a folder that makes sense for the frontend module, like /tests/frontend or something like that.

    Goal 1:
    - Write unit tests for the given frontend module and create a file prefixed with test_ and the name of the frontend module with whatever suffix is appropriate for the test and the file extension should be .py and should go into a folder that makes sense for the frontend module, like /tests/frontend or something like that.
    - Use the output/frontend_architecture.md file to help you write the unit tests as needed.
    - The project root will be in the output directory. Everything should be in the output directory, nothing should be outside of the output directory.
    - IMPORTANT: Only output the test code without any other formatting or commentary. The test code should be executable as is.
  agent: frontend_test_engineer
  context:
    - frontend_lead_engineer_task
  expected_output:
    A detailed output/frontend_test_engineer.py file containing the frontend test code.
    The output should also include the initial delegation prompt to the frontend test engineers.